const connectDB = require("../config/db");

async function runAggregation() {
  const db = await connectDB();
  const apartments = db.collection("apartments");


  // –¢–û–ü-3 —Å–∞–º—ã—Ö –¥–æ—Ä–æ–≥–∏—Ö –∫–≤–∞—Ä—Ç–∏—Ä
  console.log("\nüè† –¢–û–ü-3 –¥–æ—Ä–æ–≥–∏—Ö –∫–≤–∞—Ä—Ç–∏—Ä:");
  const topExpensive = await apartments.aggregate([
    { $sort: { price: -1 } },
    { $limit: 3 }
  ]).toArray();
  console.log(topExpensive);

  console.log("\nüí∞ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –ø–æ —Ä–∞–π–æ–Ω–∞–º:");
  const avgPriceByLocation = await db.collection('apartments').aggregate([
      { $group: { _id: "$location", avgPrice: { $avg: "$price" }, count: { $sum: 1 } } },
      { $sort: { avgPrice: -1 } }
  ]).toArray();
  console.log(avgPriceByLocation);

  console.log("\nüè° –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–≤–∞—Ä—Ç–∏—Ä –≤ —Ü–µ–Ω–æ–≤—ã—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–∞—Ö:");
        const priceRanges = await db.collection('apartments').aggregate([
            { $bucket: {
                groupBy: "$price",
                boundaries: [0, 500, 1000, 2000, 3000],
                default: "3000+",
                output: { count: { $sum: 1 } }
            }}
        ]).toArray();
        console.log(priceRanges);

  // –¢—Ä–µ–Ω–¥—ã —Ü–µ–Ω –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∫–æ–º–Ω–∞—Ç
  console.log("\nüìà –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∫–æ–º–Ω–∞—Ç:");
  const priceByRooms = await apartments.aggregate([
    { $group: { _id: "$rooms", avgPrice: { $avg: "$price" }, count: { $sum: 1 } } },
    { $sort: { _id: 1 } }
  ]).toArray();
  console.log(priceByRooms);

  process.exit();
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
runAggregation();
